[1mdiff --git a/README.md b/README.md[m
[1mindex 587681c..d3382fd 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -10,6 +10,9 @@[m [m$ make kk[m
 $ ./kk [file][m
 ```[m
 [m
[32m+[m[32mthis project uses https://github.com/tsoding/flag.h for flag parsing[m
[32m+[m[32myou can find the LICENSE for it as `LICENSE-FLAG`[m
[32m+[m
 ## features[m
 [m
 - vertical scrolling[m
[36m@@ -33,6 +36,10 @@[m [m$ ./kk [file][m
     - [ ] maybe search data structers[m
 - [ ] make a windows version[m
 [m
[32m+[m[32m- [ ] git integration[m
[32m+[m[32m    - [ ] detect patch files and display the -/+ on column[m
[32m+[m[32m    - [ ] add commands to go between `git logs` or add marks[m
[32m+[m
 ## note to self[m
 [m
 main goal of this projects isnt to make the next big pager[m
[1mdiff --git a/kk.c b/kk.c[m
[1mindex 6428307..8fd599b 100644[m
[1m--- a/kk.c[m
[1m+++ b/kk.c[m
[36m@@ -7,6 +7,9 @@[m
 #include <unistd.h>[m
 #include <sys/ioctl.h>[m
 [m
[32m+[m[32m#define FLAG_IMPLEMENTATION[m
[32m+[m[32m#include "./flag.h"[m
[32m+[m
 // 1 2 3 4 5 6 7 8 9 a b c d e [m
 // 0 0 0 0 0 s t r i n g 0 g k[m
 // char key = 's';[m
[36m@@ -107,6 +110,37 @@[m [mvoid draw_status(Context *ctx, WINDOW *win, bool input) {[m
   attroff(COLOR_PAIR(1));[m
 }[m
 [m
[32m+[m[32mvoid print_with_ansi(char *str) {[m
[32m+[m[32m  // Define color pairs[m
[32m+[m[32m  init_pair(1, COLOR_RED, -1);[m
[32m+[m[32m  init_pair(2, COLOR_GREEN, -1);[m
[32m+[m[32m  init_pair(3, COLOR_YELLOW, -1);[m
[32m+[m[32m  init_pair(4, COLOR_BLUE, -1);[m
[32m+[m[32m  init_pair(5, COLOR_MAGENTA, -1);[m
[32m+[m[32m  init_pair(6, COLOR_CYAN, -1);[m
[32m+[m[32m  init_pair(7, COLOR_WHITE, -1);[m
[32m+[m
[32m+[m[32m  char *p = str;[m
[32m+[m[32m  while (*p) {[m
[32m+[m[32m    if (*p == '\033' && *(p + 1) == '[') {[m
[32m+[m[32m      p += 2;[m
[32m+[m[32m      const char *start = p;[m
[32m+[m[32m      while (*p && *(p + 1) != 'm') p++;[m
[32m+[m[32m      // TODO: this loop doesnt terminate when it cant find m[m
[32m+[m[32m      int color_code = strtol(start, &p, 10);[m
[32m+[m[32m      if (color_code >= 30 && color_code <= 37) {[m
[32m+[m[32m        attron(COLOR_PAIR(color_code - 30 + 1)); // Set foreground color[m
[32m+[m[32m      }[m
[32m+[m[32m    } else {[m
[32m+[m[32m      printw("%c", *p); // Print character[m
[32m+[m[32m    }[m
[32m+[m[32m    p++;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  attroff(COLOR_PAIR(1)); // Turn off color[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
 void draw(Context *ctx, WINDOW *win) {[m
   clear();[m
   int maxline = getmaxy(win) - 1 + ctx->line;[m
[36m@@ -121,7 +155,9 @@[m [mvoid draw(Context *ctx, WINDOW *win) {[m
         break;[m
       }[m
     }[m
[31m-    if (i >= ctx->size) break; printw("%c%s", column, ctx->content[i]);[m
[32m+[m[32m    if (i >= ctx->size) break;[m[41m [m
[32m+[m[32m    printw("%c", column);[m
[32m+[m[32m    print_with_ansi(ctx->content[i]);[m
   }[m
 [m
   while (i++ < maxline) {[m
[36m@@ -266,14 +302,38 @@[m [mvoid handle_key(WINDOW *win, Context c, Context hp) {[m
   }[m
 }[m
 [m
[32m+[m[32mvoid usage(FILE *stream) {[m
[32m+[m[32m  fprintf(stream, "Usage: ./kk [OPTIONS] [--] [FILE]\n");[m
[32m+[m[32m  fprintf(stream, "OPTIONS:\n");[m
[32m+[m[32m  flag_print_options(stream);[m
[32m+[m[32m}[m
[32m+[m
 int main(int argc, char **argv) {[m
 [m
[32m+[m[32m    bool *Fhelp = flag_bool("h", false, "Print help and exit");[m
[32m+[m[32m    bool *Fcolor = flag_bool("r", false, "Enable color support");[m
[32m+[m[32m    bool *Fdo_paging_for_small_files = flag_bool("d", false, "Do paging even for small inputs");[m
[32m+[m
[32m+[m[32m    if (!flag_parse(argc, argv)) {[m
[32m+[m[32m        usage(stderr);[m
[32m+[m[32m        flag_print_error(stderr);[m
[32m+[m[32m        exit(1);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (*Fhelp) {[m
[32m+[m[32m        usage(stdout);[m
[32m+[m[32m        exit(0);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    int rest_argc = flag_rest_argc();[m
[32m+[m[32m    char **rest_argv = flag_rest_argv();[m
[32m+[m
   char *content[ROW];[m
   int size;[m
 [m
[31m-  if (argc == 2) {[m
[32m+[m[32m  if (rest_argc >= 1 && strcmp(rest_argv[0], "-") != 0) {[m
     // file[m
[31m-    FILE *f = fopen(argv[1], "r");[m
[32m+[m[32m    FILE *f = fopen(rest_argv[0], "r");[m
     if (f == NULL) {[m
       printf("fatal: counldnt open file");[m
       return 1;[m
[36m@@ -285,15 +345,18 @@[m [mint main(int argc, char **argv) {[m
     size = read_entire_stream(stdin, content, ROW);[m
   }[m
 [m
[31m-  struct winsize w;[m
[32m+[m[32m  // why negation???[m
[32m+[m[32m  if (!*Fdo_paging_for_small_files) {[m
[32m+[m[32m    struct winsize w;[m
 [m
[31m-  ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);[m
[32m+[m[32m    ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);[m
 [m
[31m-  if (size < w.ws_row) {[m
[31m-    for (int i; i < size; i++) {[m
[31m-      printf("%s", content[i]);[m
[32m+[m[32m    if (size < w.ws_row) {[m
[32m+[m[32m      for (int i; i < size; i++) {[m
[32m+[m[32m        printf("%s", content[i]);[m
[32m+[m[32m      }[m
[32m+[m[32m      return 0;[m
     }[m
[31m-    return 0;[m
   }[m
 [m
   WINDOW *win = initscr();[m
[1mdiff --git a/makefile b/makefile[m
[1mindex 26c3a4e..1e1cdf6 100644[m
[1m--- a/makefile[m
[1m+++ b/makefile[m
[36m@@ -1,4 +1,4 @@[m
 # TODO: make a proper makefile[m
 [m
[31m-kk: kk.c[m
[31m-	cc -o kk kk.c -lncurses -ggdb[m
[32m+[m[32mkk: kk.c thidparty/flag.h[m[41m [m
[32m+[m	[32mcc -o kk kk.c flag.h -lncurses -ggdb[m
